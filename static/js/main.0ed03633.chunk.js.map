{"version":3,"sources":["reducers/index.js","constants/index.js","store.js","serviceWorker.js","components/Card.js","components/CardList.js","components/Header.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions/index.js","index.js"],"names":["initialStateSearch","searchField","initialStateRequest","robots","pending","error","rootReducer","combineReducers","search","state","type","payload","request","store","createStore","applyMiddleware","thunkMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","Card","email","name","className","src","alt","CardList","map","robot","index","key","Header","React","Component","Scroll","props","style","overflowY","border","height","marginTop","children","SearchBox","onSearchChange","palceholder","onChange","ErrorBoundary","hasError","this","setState","App","onRequestRobots","filteredRobots","filter","toLowerCase","includes","toString","connect","dispatch","event","target","value","fetch","response","json","users","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0ed03633.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants'\n\nconst initialStateSearch = { searchField: '' }\nconst initialStateRequest = { robots: [], pending: false, error: '' }\n\nconst search = (state = initialStateSearch, { type, payload } = {}) => {\n  switch (type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: payload } // spread operator\n\n    // pure function must return something, need case default\n    default:\n      return state\n  }\n}\n\nconst request = (state = initialStateRequest, { type, payload } = {}) => {\n  switch (type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, pending: true, error: '' }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: payload, pending: false, error: '' }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: payload, pending: false }\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers({ search, request })\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { rootReducer } from './reducers'\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware /*, createLogger()*/)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nexport const Card = ({ email, name }) => {\n  return (\n    <div className='tc bg-light-blue dib br3 ma2 grow shadow-5 bw2'>\n      <img\n        src={`https://robohash.org/${name}?size=200x200&set=set3`}\n        alt='robot'\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Card } from './Card'\n\nexport const CardList = ({ robots }) => {\n  if (true) {\n    // throw new Error('noooo')\n  }\n  console.log('CardList')\n  return (\n    <>\n      {robots.map((robot, index) => (\n        <Card key={index} {...robot} />\n      ))}\n    </>\n  )\n}\n","import React from 'react'\n// import Button from '../components/Button'\n\nexport class Header extends React.Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false\n  // }\n  render() {\n    console.log('Header')\n    return (\n      <>\n        <h1 className='f1'>ROBOFRIENDS</h1>\n        {/* <Button color='red' /> */}\n      </>\n    )\n  }\n}\n","import React from 'react'\n\nexport const Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '600px',\n        marginTop: '10px'\n      }}>\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const SearchBox = ({ onSearchChange }) => {\n  console.log('SearchBox')\n  return (\n    <label>\n      Search\n      <input\n        type='search'\n        palceholder='robot'\n        className='pa2'\n        onChange={onSearchChange}\n      />\n    </label>\n  )\n}\n","import React, { Component } from 'react'\n\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true })\n  }\n  render() {\n    return this.state.hasError ? <h1>Oopps</h1> : this.props.children\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { CardList } from '../components/CardList'\nimport { Header } from '../components/Header'\nimport { Scroll } from '../components/Scroll'\nimport { SearchBox } from '../components/SearchBox'\nimport { ErrorBoundary } from '../components/ErrorBoundary'\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = ({\n  search: { searchField },\n  request: { robots, pending, error }\n}) => {\n  return {\n    searchField,\n    robots,\n    pending,\n    error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\nclass App extends Component {\n  // equivalent\n  // state = {\n  //   robots: robots\n  // }\n  constructor() {\n    super()\n    this.state = {\n      robots: []\n    }\n  }\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, error, pending } = this.props\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField)\n    )\n    return pending ? (\n      <h1>Loading</h1>\n    ) : error ? (\n      <p>{error.toString()}</p>\n    ) : (\n      <>\n        <div className='tc'>\n          <Header />\n          <SearchBox onSearchChange={onSearchChange} />\n        </div>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants'\n\nexport const setSearchField = text => {\n  return { type: CHANGE_SEARCH_FIELD, payload: text }\n}\n\n/*\n  the function returned by requestRobots gets passed to\n  redux thunk middleware\n  redux thunk then forward the dispatch method and\n  returns an object\n*/\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","// can use imports as react has webpack built in\nimport React from 'react'\nimport ReactDOM from 'react-dom' // used for browsers\nimport { Provider } from 'react-redux'\n\nimport { store } from './store'\nimport './index.css'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker'\nimport App from './containers/App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}