{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Header.js","components/Scroll.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","email","name","className","src","alt","CardList","robots","map","robot","index","key","Header","Scroll","props","style","overflowY","border","height","marginTop","children","SearchBox","onSearchChange","type","palceholder","onChange","App","event","filteredRobots","state","filter","toLowerCase","includes","target","value","setState","searchField","fetch","then","response","json","users","this","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCChBOC,EAAO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC5B,OACE,yBAAKC,UAAU,kDACb,yBACEC,IAAG,+BAA0BF,EAA1B,0BACHG,IAAI,UAEN,6BACE,4BAAKH,GACL,2BAAID,MCRCK,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzB,OACE,oCACGA,EAAOC,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,EAAD,eAAMC,IAAKD,GAAWD,SCLjBG,EAAS,WACpB,OAAO,wBAAIT,UAAU,MAAd,gBCDIU,EAAS,SAAAC,GACpB,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,QACRC,UAAW,SAEZL,EAAMM,WCTAC,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC1B,OACE,2BACEC,KAAK,SACLC,YAAY,QACZrB,UAAU,MACVsB,SAAUH,KCFHI,EAAb,kDAKE,aAAe,IAAD,8BACZ,gBAeFJ,eAAiB,SAAAK,GAAU,IAEnBC,EADa,EAAKC,MAAhBtB,OACsBuB,QAAO,SAAArB,GAAK,OACxCA,EAAMP,KAAK6B,cAAcC,SAASL,EAAMM,OAAOC,UAEjD,EAAKC,SAAS,CAAE5B,OAAQqB,KAnBxB,EAAKC,MAAQ,CACXtB,OAAQ,GACR6B,YAAa,IAJH,EALhB,gEAauB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKN,SAAS,CAAE5B,OAAQkC,SAjBhC,+BA8BI,OADmBC,KAAKb,MAAhBtB,OACOoC,OAGb,oCACE,yBAAKxC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWmB,eAAgBoB,KAAKpB,kBAElC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUf,OAAQmC,KAAKb,MAAMtB,WARjC,2CA/BN,GAAyBqC,aCEzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a5ef2d82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nexport const Card = ({ email, name }) => {\n  return (\n    <div className='tc bg-light-blue dib br3 ma2 grow shadow-5 bw2'>\n      <img\n        src={`https://robohash.org/${name}?size=200x200&set=set3`}\n        alt='robot'\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Card } from './Card'\n\nexport const CardList = ({ robots }) => {\n  return (\n    <>\n      {robots.map((robot, index) => (\n        <Card key={index} {...robot} />\n      ))}\n    </>\n  )\n}\n","import React from 'react'\n\nexport const Header = () => {\n  return <h1 className='f1'>ROBOFRIENDS</h1>\n}\n","import React from 'react'\n\nexport const Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '600px',\n        marginTop: '10px'\n      }}>\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const SearchBox = ({ onSearchChange }) => {\n  return (\n    <input\n      type='search'\n      palceholder='robot'\n      className='pa2'\n      onChange={onSearchChange}\n    />\n  )\n}\n","import React, { Component } from 'react'\nimport { CardList } from '../components/CardList'\nimport { Header } from '../components/Header'\nimport { Scroll } from '../components/Scroll'\nimport { SearchBox } from '../components/SearchBox'\n\nexport class App extends Component {\n  // equivalent\n  // state = {\n  //   robots: robots\n  // }\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ robots: users })\n      })\n  }\n\n  onSearchChange = event => {\n    const { robots } = this.state\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(event.target.value)\n    )\n    this.setState({ robots: filteredRobots })\n  }\n  render() {\n    const { robots } = this.state\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <>\n        <div className='tc'>\n          <Header />\n          <SearchBox onSearchChange={this.onSearchChange} />\n        </div>\n        <Scroll>\n          <CardList robots={this.state.robots} />\n        </Scroll>\n      </>\n    )\n  }\n}\n","// can use imports as react has webpack built in\nimport React from 'react'\nimport ReactDOM from 'react-dom' // used for browsers\nimport './index.css'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker'\nimport { App } from './containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}